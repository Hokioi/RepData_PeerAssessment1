week_df$weekdays <- weekdays(as.Date(week_df$date))
# Convert days of the week to 2 levels: "weekday" and "weekend"
week_df$weekdays[week_df$weekdays %in% c("Monday", "Tuesday")] <- "weekday"
# Create a new dataset with a column specifying the day of the week
week_df <- dat_raw
week_df$weekdays <- weekdays(as.Date(week_df$date))
# Convert days of the week to 2 levels: "weekday" and "weekend"
week_df$weekdays[week_df$weekdays %in% c("Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday")] <- "weekday"
week_df$weekdays[week_df$weekdays %in% c("Saturday",
"Sunday")] <- "weekend"
str(week_df)
dat_raw <- read.csv(unz("activity.zip", "activity.csv"))
library(ggplot2)
library(knitr)
opts_chunk$set(warning = FALSE, message = FALSE) #turn off messages and warnings
dailysteps <- aggregate(steps ~ date,
dat_raw,
FUN=sum)
plot1 <- ggplot(data = dailysteps, aes(dailysteps$steps)) +
geom_histogram() +
labs(title = "Histogram of the total number of steps taken each day") +
labs(x = "Number of steps in a day", y = "count of days")
plot1
meansteps <- round(mean(dailysteps$steps), 0)
mediansteps <- median(dailysteps$steps)
intervalsteps <- aggregate(steps ~ interval,
dat_raw,
FUN=mean)
plot2 <- ggplot(data = intervalsteps, aes(x = interval, y = steps)) +
geom_line() +
labs(title = "Time series plot of the average number of steps taken in each 5 minute interval") +
labs(x = "Interval", y = "Average steps")
plot2
maxsteps <- max(intervalsteps$steps) # find the maximum number of steps in an interval
maxinterval <- intervalsteps$interval[intervalsteps$steps == maxsteps] # select the interval with the max number of steps
NArow <- nrow(dat_raw) - sum(complete.cases(dat_raw))
# Extract the IDs of the NA rows in the raw dataset
na_id <- which(is.na(dat_raw$steps))
# Merge raw data with interval averages data previously calculated:
merged <- merge(dat_raw, intervalsteps, by = "interval", suffixes = c(".raw", ".intsteps"))
# Order the merged table by date, interval, and reorder rownames so that IDs match those of the NA rows extracted from the raw dataset
merged2 <- merged[with(merged, order(date, interval)), ]
row.names(merged2) <- NULL
# Create a new dataset and impute the interval averages for NA values
impute_df <- dat_raw
impute_df[na_id, "steps"] <- merged2[na_id, "steps.intsteps"]
dailystepsimp <- aggregate(steps ~ date,
impute_df,
FUN=sum)
plot2 <- ggplot(data = dailystepsimp, aes(dailystepsimp$steps)) +
geom_histogram() +
labs(title = "Histogram of the total number of steps taken each day (imputed data)") +
labs(x = "Number of steps in a day", y = "count of days")
plot2
meanstepsimp <- round(mean(dailystepsimp$steps), 0)
medianstepsimp <- round(median(dailystepsimp$steps), 3)
# Create a new dataset with a column specifying the day of the week
week_df <- dat_raw
week_df$weekdays <- weekdays(as.Date(week_df$date))
# Convert days of the week to 2 levels: "weekday" and "weekend"
week_df$weekdays[week_df$weekdays %in% c("Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday")] <- "weekday"
week_df$weekdays[week_df$weekdays %in% c("Saturday",
"Sunday")] <- "weekend"
str(week_df)
levels(week_df$weekdays)
# Create a new dataset with a column specifying the day of the week
week_df <- dat_raw
as.factor(week_df$weekdays <- weekdays(as.Date(week_df$date)))
# Convert days of the week to 2 levels: "weekday" and "weekend"
week_df$weekdays[week_df$weekdays %in% c("Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday")] <- "weekday"
week_df$weekdays[week_df$weekdays %in% c("Saturday",
"Sunday")] <- "weekend"
# Create a new dataset with a column specifying the day of the week
week_df <- dat_raw
week_df$weekdays <- as.factor(weekdays(as.Date(week_df$date)))
# Convert days of the week to 2 levels: "weekday" and "weekend"
week_df$weekdays[week_df$weekdays %in% c("Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday")] <- "weekday"
week_df$weekdays[week_df$weekdays %in% c("Saturday",
"Sunday")] <- "weekend"
# Create a new dataset with a column specifying the day of the week
week_df <- dat_raw
week_df$weekdays <- weekdays(as.Date(week_df$date))
week_df$weekdays <- as.factor(week_df$weekdays)
# Convert days of the week to 2 levels: "weekday" and "weekend"
week_df$weekdays[week_df$weekdays %in% c("Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday")] <- "weekday"
week_df$weekdays[week_df$weekdays %in% c("Saturday",
"Sunday")] <- "weekend"
# Create a new dataset with a column specifying the day of the week
week_df <- dat_raw
week_df$weekdays <- weekdays(as.Date(week_df$date))
week_df$weekdays <- as.factor(as.character(week_df$weekdays))
# Convert days of the week to 2 levels: "weekday" and "weekend"
week_df$weekdays[week_df$weekdays %in% c("Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday")] <- "weekday"
week_df$weekdays[week_df$weekdays %in% c("Saturday",
"Sunday")] <- "weekend"
str(week_df)
# Create a new dataset with a column specifying the day of the week
week_df <- dat_raw
week_df$weekdays <- weekdays(as.Date(week_df$date))
# week_df$weekdays <- as.factor(as.character(week_df$weekdays))
#
# # Convert days of the week to 2 levels: "weekday" and "weekend"
# week_df$weekdays[week_df$weekdays %in% c("Monday",
#                                          "Tuesday",
#                                          "Wednesday",
#                                          "Thursday",
#                                          "Friday")] <- "weekday"
# week_df$weekdays[week_df$weekdays %in% c("Saturday",
#                                          "Sunday")] <- "weekend"
str(week_df)
week_df$weekdays <- as.factor(week_df$weekdays)
str(week_df)
dat_raw <- read.csv(unz("activity.zip", "activity.csv"))
library(ggplot2)
library(knitr)
opts_chunk$set(warning = FALSE, message = FALSE) #turn off messages and warnings
dailysteps <- aggregate(steps ~ date,
dat_raw,
FUN=sum)
plot1 <- ggplot(data = dailysteps, aes(dailysteps$steps)) +
geom_histogram() +
labs(title = "Histogram of the total number of steps taken each day") +
labs(x = "Number of steps in a day", y = "count of days")
plot1
meansteps <- round(mean(dailysteps$steps), 0)
mediansteps <- median(dailysteps$steps)
intervalsteps <- aggregate(steps ~ interval,
dat_raw,
FUN=mean)
plot2 <- ggplot(data = intervalsteps, aes(x = interval, y = steps)) +
geom_line() +
labs(title = "Time series plot of the average number of steps taken in each 5 minute interval") +
labs(x = "Interval", y = "Average steps")
plot2
maxsteps <- max(intervalsteps$steps) # find the maximum number of steps in an interval
maxinterval <- intervalsteps$interval[intervalsteps$steps == maxsteps] # select the interval with the max number of steps
NArow <- nrow(dat_raw) - sum(complete.cases(dat_raw))
# Extract the IDs of the NA rows in the raw dataset
na_id <- which(is.na(dat_raw$steps))
# Merge raw data with interval averages data previously calculated:
merged <- merge(dat_raw, intervalsteps, by = "interval", suffixes = c(".raw", ".intsteps"))
# Order the merged table by date, interval, and reorder rownames so that IDs match those of the NA rows extracted from the raw dataset
merged2 <- merged[with(merged, order(date, interval)), ]
row.names(merged2) <- NULL
# Create a new dataset and impute the interval averages for NA values
impute_df <- dat_raw
impute_df[na_id, "steps"] <- merged2[na_id, "steps.intsteps"]
dailystepsimp <- aggregate(steps ~ date,
impute_df,
FUN=sum)
plot2 <- ggplot(data = dailystepsimp, aes(dailystepsimp$steps)) +
geom_histogram() +
labs(title = "Histogram of the total number of steps taken each day (imputed data)") +
labs(x = "Number of steps in a day", y = "count of days")
plot2
meanstepsimp <- round(mean(dailystepsimp$steps), 0)
medianstepsimp <- round(median(dailystepsimp$steps), 3)
# Create a new dataset with a column specifying the day of the week
week_df <- dat_raw
week_df$weekdays <- weekdays(as.Date(week_df$date))
week_df$weekdays <- as.factor(week_df$weekdays)
#
# # Convert days of the week to 2 levels: "weekday" and "weekend"
# week_df$weekdays[week_df$weekdays %in% c("Monday",
#                                          "Tuesday",
#                                          "Wednesday",
#                                          "Thursday",
#                                          "Friday")] <- "weekday"
# week_df$weekdays[week_df$weekdays %in% c("Saturday",
#                                          "Sunday")] <- "weekend"
str(week_df)
dat_raw <- read.csv(unz("activity.zip", "activity.csv"))
library(ggplot2)
library(knitr)
opts_chunk$set(warning = FALSE, message = FALSE) #turn off messages and warnings
dailysteps <- aggregate(steps ~ date,
dat_raw,
FUN=sum)
plot1 <- ggplot(data = dailysteps, aes(dailysteps$steps)) +
geom_histogram() +
labs(title = "Histogram of the total number of steps taken each day") +
labs(x = "Number of steps in a day", y = "count of days")
plot1
meansteps <- round(mean(dailysteps$steps), 0)
mediansteps <- median(dailysteps$steps)
intervalsteps <- aggregate(steps ~ interval,
dat_raw,
FUN=mean)
plot2 <- ggplot(data = intervalsteps, aes(x = interval, y = steps)) +
geom_line() +
labs(title = "Time series plot of the average number of steps taken in each 5 minute interval") +
labs(x = "Interval", y = "Average steps")
plot2
maxsteps <- max(intervalsteps$steps) # find the maximum number of steps in an interval
maxinterval <- intervalsteps$interval[intervalsteps$steps == maxsteps] # select the interval with the max number of steps
NArow <- nrow(dat_raw) - sum(complete.cases(dat_raw))
# Extract the IDs of the NA rows in the raw dataset
na_id <- which(is.na(dat_raw$steps))
# Merge raw data with interval averages data previously calculated:
merged <- merge(dat_raw, intervalsteps, by = "interval", suffixes = c(".raw", ".intsteps"))
# Order the merged table by date, interval, and reorder rownames so that IDs match those of the NA rows extracted from the raw dataset
merged2 <- merged[with(merged, order(date, interval)), ]
row.names(merged2) <- NULL
# Create a new dataset and impute the interval averages for NA values
impute_df <- dat_raw
impute_df[na_id, "steps"] <- merged2[na_id, "steps.intsteps"]
dailystepsimp <- aggregate(steps ~ date,
impute_df,
FUN=sum)
plot2 <- ggplot(data = dailystepsimp, aes(dailystepsimp$steps)) +
geom_histogram() +
labs(title = "Histogram of the total number of steps taken each day (imputed data)") +
labs(x = "Number of steps in a day", y = "count of days")
plot2
meanstepsimp <- round(mean(dailystepsimp$steps), 0)
medianstepsimp <- round(median(dailystepsimp$steps), 3)
# Create a new dataset with a column specifying the day of the week
week_df <- dat_raw
week_df$weekdays <- weekdays(as.Date(week_df$date))
week_df$weekdays <- as.factor(week_df$weekdays)
# Convert days of the week to 2 levels: "weekday" and "weekend"
week_df$weekdays[week_df$weekdays %in% c("Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday")] <- "weekday"
week_df$weekdays[week_df$weekdays %in% c("Saturday",
"Sunday")] <- "weekend"
str(week_df)
dat_raw <- read.csv(unz("activity.zip", "activity.csv"))
library(ggplot2)
library(knitr)
opts_chunk$set(warning = FALSE, message = FALSE) #turn off messages and warnings
dailysteps <- aggregate(steps ~ date,
dat_raw,
FUN=sum)
plot1 <- ggplot(data = dailysteps, aes(dailysteps$steps)) +
geom_histogram() +
labs(title = "Histogram of the total number of steps taken each day") +
labs(x = "Number of steps in a day", y = "count of days")
plot1
meansteps <- round(mean(dailysteps$steps), 0)
mediansteps <- median(dailysteps$steps)
intervalsteps <- aggregate(steps ~ interval,
dat_raw,
FUN=mean)
plot2 <- ggplot(data = intervalsteps, aes(x = interval, y = steps)) +
geom_line() +
labs(title = "Time series plot of the average number of steps taken in each 5 minute interval") +
labs(x = "Interval", y = "Average steps")
plot2
maxsteps <- max(intervalsteps$steps) # find the maximum number of steps in an interval
maxinterval <- intervalsteps$interval[intervalsteps$steps == maxsteps] # select the interval with the max number of steps
NArow <- nrow(dat_raw) - sum(complete.cases(dat_raw))
# Extract the IDs of the NA rows in the raw dataset
na_id <- which(is.na(dat_raw$steps))
# Merge raw data with interval averages data previously calculated:
merged <- merge(dat_raw, intervalsteps, by = "interval", suffixes = c(".raw", ".intsteps"))
# Order the merged table by date, interval, and reorder rownames so that IDs match those of the NA rows extracted from the raw dataset
merged2 <- merged[with(merged, order(date, interval)), ]
row.names(merged2) <- NULL
# Create a new dataset and impute the interval averages for NA values
impute_df <- dat_raw
impute_df[na_id, "steps"] <- merged2[na_id, "steps.intsteps"]
dailystepsimp <- aggregate(steps ~ date,
impute_df,
FUN=sum)
plot2 <- ggplot(data = dailystepsimp, aes(dailystepsimp$steps)) +
geom_histogram() +
labs(title = "Histogram of the total number of steps taken each day (imputed data)") +
labs(x = "Number of steps in a day", y = "count of days")
plot2
meanstepsimp <- round(mean(dailystepsimp$steps), 0)
medianstepsimp <- round(median(dailystepsimp$steps), 3)
week_df <- dat_raw
week_df$weekdays <- weekdays(as.Date(week_df$date))
week_df$weekdays <- as.factor(week_df$weekdays)
str(week_df)
week_df$weekdays[week_df$weekdays %in% c("Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday")] <- "weekday"
week_df <- dat_raw
week_df$weekdays <- weekdays(as.Date(week_df$date))
str(week_df)
week_df$weekdays[week_df$weekdays %in% c("Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday")] <- "weekday"
str(week_df)
dat_raw <- read.csv(unz("activity.zip", "activity.csv"))
library(ggplot2)
library(knitr)
opts_chunk$set(warning = FALSE, message = FALSE) #turn off messages and warnings
dailysteps <- aggregate(steps ~ date,
dat_raw,
FUN=sum)
plot1 <- ggplot(data = dailysteps, aes(dailysteps$steps)) +
geom_histogram() +
labs(title = "Histogram of the total number of steps taken each day") +
labs(x = "Number of steps in a day", y = "count of days")
plot1
meansteps <- round(mean(dailysteps$steps), 0)
mediansteps <- median(dailysteps$steps)
intervalsteps <- aggregate(steps ~ interval,
dat_raw,
FUN=mean)
plot2 <- ggplot(data = intervalsteps, aes(x = interval, y = steps)) +
geom_line() +
labs(title = "Time series plot of the average number of steps taken in each 5 minute interval") +
labs(x = "Interval", y = "Average steps")
plot2
maxsteps <- max(intervalsteps$steps) # find the maximum number of steps in an interval
maxinterval <- intervalsteps$interval[intervalsteps$steps == maxsteps] # select the interval with the max number of steps
NArow <- nrow(dat_raw) - sum(complete.cases(dat_raw))
# Extract the IDs of the NA rows in the raw dataset
na_id <- which(is.na(dat_raw$steps))
# Merge raw data with interval averages data previously calculated:
merged <- merge(dat_raw, intervalsteps, by = "interval", suffixes = c(".raw", ".intsteps"))
# Order the merged table by date, interval, and reorder rownames so that IDs match those of the NA rows extracted from the raw dataset
merged2 <- merged[with(merged, order(date, interval)), ]
row.names(merged2) <- NULL
# Create a new dataset and impute the interval averages for NA values
impute_df <- dat_raw
impute_df[na_id, "steps"] <- merged2[na_id, "steps.intsteps"]
dailystepsimp <- aggregate(steps ~ date,
impute_df,
FUN=sum)
plot2 <- ggplot(data = dailystepsimp, aes(dailystepsimp$steps)) +
geom_histogram() +
labs(title = "Histogram of the total number of steps taken each day (imputed data)") +
labs(x = "Number of steps in a day", y = "count of days")
plot2
meanstepsimp <- round(mean(dailystepsimp$steps), 0)
medianstepsimp <- round(median(dailystepsimp$steps), 3)
# Create a new dataset with a column specifying the day of the week
week_df <- dat_raw
week_df$weekdays <- weekdays(as.Date(week_df$date))
# Convert days of the week to 2 levels: "weekday" and "weekend"
week_df$weekdays[week_df$weekdays %in% c("Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday")] <- "weekday"
week_df$weekdays[week_df$weekdays %in% c("Saturday",
"Sunday")] <- "weekend"
# Convert weekdays variable from a character to a factor
week_df$weekdays <- as.factor(week_df$weekdays)
str(week_df)
plot4 <- ggplot(data = week_df, aes(x = interval, y = steps), facet) +
geom_line() +
facet_wrap(~weekdays, nrow = 2)
labs(title = "Time series plot of the average number of steps taken in each 5 minute interval") +
labs(x = "Interval", y = "Average steps")
plot4 <- ggplot(data = week_df, aes(x = interval, y = steps), facet) +
geom_line() +
facet_wrap(~weekdays, nrow = 2) +
labs(title = "Time series plot of the average number of steps taken in each 5 minute interval") +
labs(x = "Interval", y = "Average steps")
plot4
plot4 <- ggplot(data = week_df, aes(x = interval, y = steps)) +
geom_line() +
facet_wrap(~weekdays, nrow = 2) +
labs(title = "Time series plot of the average number of steps taken in each 5 minute interval") +
labs(x = "Interval", y = "Average steps")
plot4
plot4 <- ggplot(data = week_df, aes(x = interval, y = steps)) +
geom_bar() +
facet_wrap(~weekdays, nrow = 2) +
labs(title = "Time series plot of the average number of steps taken in each 5 minute interval") +
labs(x = "Interval", y = "Average steps")
plot4
plot4 <- ggplot(data = week_df, aes(x = interval, y = steps)) +
geom_linerange() +
facet_wrap(~weekdays, nrow = 2) +
labs(title = "Time series plot of the average number of steps taken in each 5 minute interval") +
labs(x = "Interval", y = "Average steps")
plot4
plot4 <- ggplot(data = week_df, aes(x = interval, y = steps)) +
geom_linerange(ymin = -100) +
facet_wrap(~weekdays, nrow = 2) +
labs(title = "Time series plot of the average number of steps taken in each 5 minute interval") +
labs(x = "Interval", y = "Average steps")
plot4
plot4 <- ggplot(data = week_df, aes(x = interval, y = steps)) +
geom_linerange(ymin = -100, ymax = 800) +
facet_wrap(~weekdays, nrow = 2) +
labs(title = "Time series plot of the average number of steps taken in each 5 minute interval") +
labs(x = "Interval", y = "Average steps")
plot4
plot4 <- ggplot(data = week_df, aes(x = interval, y = steps)) +
geom_linerange(ymin = -1000, ymax = 8000) +
facet_wrap(~weekdays, nrow = 2) +
labs(title = "Time series plot of the average number of steps taken in each 5 minute interval") +
labs(x = "Interval", y = "Average steps")
plot4
plot4 <- ggplot(data = week_df, aes(x = interval, y = steps)) +
geom_line(ymin = -1000, ymax = 8000) +
facet_wrap(~weekdays, nrow = 2) +
labs(title = "Time series plot of the average number of steps taken in each 5 minute interval") +
labs(x = "Interval", y = "Average steps")
plot4
plot4 <- ggplot(data = week_df, aes(x = interval, y = steps)) +
geom_line(ymin = -1000, ymax = 8000) +
facet_wrap(~weekdays, nrow = 2) +
labs(title = "Time series plot of the average number of steps taken in each 5 minute interval") +
labs(x = "Interval", y = "Average steps")
plot4
plot4
plot4 <- ggplot(data = week_df, aes(x = interval, y = steps)) +
geom_line(size = 0.5) +
geom_point(size = 1.5) +
facet_wrap(~weekdays, nrow = 2) +
labs(title = "Time series plot of the average number of steps taken in each 5 minute interval") +
labs(x = "Interval", y = "Average steps")
plot4
plot4 <- ggplot(data = week_df, aes(x = interval, y = steps)) +
geom_line(size = 0.5) +
geom_point(size = 1.5) +
facet_wrap(~weekdays, nrow = 2) +
labs(title = "Time series plot of the average number of steps taken in each 5 minute interval") +
labs(x = "Interval", y = "Average steps")
plot4
plot4 <- ggplot(data = week_df, aes(x = interval, y = steps)) +
geom_line(size = 0.5) +
geom_point(size = 0.5) +
facet_wrap(~weekdays, nrow = 2) +
labs(title = "Time series plot of the average number of steps taken in each 5 minute interval") +
labs(x = "Interval", y = "Average steps")
plot4
plot4 <- ggplot(data = week_df, aes(x = interval, y = steps)) +
geom_line(size = 0.5) +
facet_wrap(~weekdays, nrow = 2) +
labs(title = "Time series plot of the average number of steps taken in each 5 minute interval") +
labs(x = "Interval", y = "Average steps")
plot4
plot4 <- ggplot(data = week_df, aes(x = interval, y = steps)) +
geom_line(size = 0.5) +
geom_point(size = 0.5) +
facet_wrap(~weekdays, nrow = 2) +
labs(title = "Time series plot of the average number of steps taken in each 5 minute interval") +
labs(x = "Interval", y = "Average steps")
plot4
intervalsteps2 <- aggregate(steps ~ interval + weekdays,
week_df,
FUN=mean)
View(intervalsteps2)
plot4 <- ggplot(data = intervalsteps2, aes(x = interval, y = steps)) +
geom_line(size = 0.5) +
geom_point(size = 0.5) +
facet_wrap(~weekdays, nrow = 2) +
labs(title = "Time series plot of the average number of steps taken in each 5 minute interval") +
labs(x = "Interval", y = "Average steps")
plot4
plot4 <- ggplot(data = intervalsteps2, aes(x = interval, y = steps)) +
geom_line(size = 0.5) +
facet_wrap(~weekdays, nrow = 2) +
labs(title = "Time series plot of the average number of steps taken in each 5 minute interval") +
labs(x = "Interval", y = "Average steps")
plot4
plot4 <- ggplot(data = intervalsteps2, aes(x = interval, y = steps)) +
geom_line(size = 0.5) +
facet_wrap(~weekdays, nrow = 2) +
labs(title = "Time series plot of the average number of steps taken in each 5 minute intervalon week days and weekends") +
labs(x = "Interval", y = "Average steps")
plot4
plot4 <- ggplot(data = intervalsteps2, aes(x = interval, y = steps)) +
geom_line(size = 0.5) +
facet_wrap(~weekdays, nrow = 2) +
labs(title = "Time series plot of the average number of steps taken in each 5 minute intervalon week days and weekends", size = rel(0.8)) +
labs(x = "Interval", y = "Average steps")
plot4
plot4 <- ggplot(data = intervalsteps2, aes(x = interval, y = steps)) +
geom_line(size = 0.5) +
facet_wrap(~weekdays, nrow = 2) +
labs(title = "Time series plot of the average number of steps taken in each 5 minute intervalon week days and weekends", size = rel(0.6)) +
labs(x = "Interval", y = "Average steps")
plot4
plot4 <- ggplot(data = intervalsteps2, aes(x = interval, y = steps)) +
geom_line(size = 0.5) +
facet_wrap(~weekdays, nrow = 2) +
labs(title = "Time series plot of the average number of steps taken in each 5 minute interval") +
labs(x = "Interval", y = "Average steps")
plot4
meansteps <- mean(dailysteps$steps)
mediansteps <- median(dailysteps$steps)
